/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface.Customer;

import Business.Business;
import Business.Enterprise.AirlineEnterprise;
import Business.Enterprise.Enterprise;
import Business.FlightDetails.Flight;
import Business.Language;
import Business.Network.Network;
import Business.Organization.Organization;
import Business.UserAccount.UserAccount;
import java.awt.CardLayout;
import java.text.SimpleDateFormat;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Rakesh
 */
public class FlightBookingJPanel extends javax.swing.JPanel {

    private Enterprise enterprise;
    private JPanel userProcessContainer;
    private UserAccount userAccount;
    private Organization organization;
    private Business business;
    private Enterprise e;
    private SimpleDateFormat dateFormat = new SimpleDateFormat("MM/dd/yyyy");

    /**
     * Creates new form FlightBookingJPanel
     */
    public FlightBookingJPanel(JPanel userProcessContainer, UserAccount userAccount, Organization organization, Enterprise enterprise, Business business) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.userAccount = userAccount;
        this.organization = organization;
        this.enterprise = enterprise;
        this.business = business;
        loadLabels();
        loadScreen();
    }

    public void loadLabels() {
        lblAvaliableFlights.setText(Language.avaliableFlight);
        lblClass.setText(Language.ticketclass);
        lblDestination.setText(Language.destination);
        lblFlightBookings.setText(Language.flightBooking);
        lblNumberOfTickets.setText(Language.numberOfTickets);
        lblSearchBy.setText(Language.searchBy);
        lblSource.setText(Language.source);
        lblTravelDate.setText(Language.toDate);
        lblTravelDate1.setText(Language.fromDate);
        btnResetSearch.setText(Language.resetSearch);
        btnSearchFlight.setText(Language.search);
        btnSelectFlight.setText(Language.selectFlight);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblFlightBookings = new javax.swing.JLabel();
        lblSearchBy = new javax.swing.JLabel();
        lblSource = new javax.swing.JLabel();
        lblTravelDate = new javax.swing.JLabel();
        jScrollPane8 = new javax.swing.JScrollPane();
        tblScheduledFlights = new javax.swing.JTable();
        lblAvaliableFlights = new javax.swing.JLabel();
        btnSelectFlight = new javax.swing.JButton();
        btnResetSearch = new javax.swing.JButton();
        cmbSource = new javax.swing.JComboBox();
        cmbDestination = new javax.swing.JComboBox();
        lblDestination = new javax.swing.JLabel();
        lblNumberOfTickets = new javax.swing.JLabel();
        cmbNumberOfTicket = new javax.swing.JComboBox();
        cmbDateFrom = new org.jdesktop.swingx.JXDatePicker();
        btnSearchFlight = new javax.swing.JButton();
        cmbCategory = new javax.swing.JComboBox();
        lblTravelDate1 = new javax.swing.JLabel();
        cmbDateTo = new org.jdesktop.swingx.JXDatePicker();
        lblClass = new javax.swing.JLabel();

        setBackground(new java.awt.Color(255, 255, 255));

        lblFlightBookings.setFont(new java.awt.Font("Calibri", 1, 24)); // NOI18N
        lblFlightBookings.setText("Flight Bookings");

        lblSearchBy.setFont(new java.awt.Font("Calibri", 2, 12)); // NOI18N
        lblSearchBy.setText("Search By");

        lblSource.setFont(new java.awt.Font("Calibri", 0, 12)); // NOI18N
        lblSource.setText("Source");

        lblTravelDate.setFont(new java.awt.Font("Calibri", 0, 12)); // NOI18N
        lblTravelDate.setText("From Date");

        tblScheduledFlights.setFont(new java.awt.Font("Calibri", 0, 12)); // NOI18N
        tblScheduledFlights.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Flight ID", "Source", "Destination", "Date", "Economy Fare", "Business Fare", "Category"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblScheduledFlights.setSelectionBackground(new java.awt.Color(204, 204, 204));
        tblScheduledFlights.setSelectionForeground(new java.awt.Color(0, 0, 0));
        jScrollPane8.setViewportView(tblScheduledFlights);

        lblAvaliableFlights.setFont(new java.awt.Font("Calibri", 2, 12)); // NOI18N
        lblAvaliableFlights.setText("Avaliable Flights");

        btnSelectFlight.setBackground(new java.awt.Color(255, 255, 255));
        btnSelectFlight.setFont(new java.awt.Font("Calibri", 0, 12)); // NOI18N
        btnSelectFlight.setText("Select Flight");
        btnSelectFlight.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSelectFlightActionPerformed(evt);
            }
        });

        btnResetSearch.setBackground(new java.awt.Color(255, 255, 255));
        btnResetSearch.setFont(new java.awt.Font("Calibri", 0, 12)); // NOI18N
        btnResetSearch.setText("Reset Search");
        btnResetSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnResetSearchActionPerformed(evt);
            }
        });

        cmbSource.setFont(new java.awt.Font("Calibri", 0, 12)); // NOI18N
        cmbSource.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbSource(evt);
            }
        });

        cmbDestination.setFont(new java.awt.Font("Calibri", 0, 12)); // NOI18N
        cmbDestination.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbDestination(evt);
            }
        });

        lblDestination.setFont(new java.awt.Font("Calibri", 0, 12)); // NOI18N
        lblDestination.setText("Destination");

        lblNumberOfTickets.setFont(new java.awt.Font("Calibri", 0, 12)); // NOI18N
        lblNumberOfTickets.setText("Number of Tickets");

        cmbNumberOfTicket.setFont(new java.awt.Font("Calibri", 0, 12)); // NOI18N
        cmbNumberOfTicket.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "1", "2", "3", "4", "5" }));

        btnSearchFlight.setBackground(new java.awt.Color(255, 255, 255));
        btnSearchFlight.setFont(new java.awt.Font("Calibri", 0, 12)); // NOI18N
        btnSearchFlight.setText("Search");
        btnSearchFlight.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchFlightActionPerformed(evt);
            }
        });

        cmbCategory.setFont(new java.awt.Font("Calibri", 0, 12)); // NOI18N
        cmbCategory.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Business", "Economy" }));

        lblTravelDate1.setFont(new java.awt.Font("Calibri", 0, 12)); // NOI18N
        lblTravelDate1.setText("To Date");

        lblClass.setFont(new java.awt.Font("Calibri", 0, 12)); // NOI18N
        lblClass.setText("Class");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblNumberOfTickets)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(cmbNumberOfTicket, javax.swing.GroupLayout.PREFERRED_SIZE, 247, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(36, 36, 36)
                        .addComponent(lblClass)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(cmbCategory, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(110, 110, 110)
                        .addComponent(btnSelectFlight))
                    .addComponent(lblFlightBookings, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblSearchBy)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblTravelDate1)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(cmbDateTo, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(lblDestination)
                                        .addComponent(lblSource)
                                        .addComponent(lblTravelDate))
                                    .addGap(18, 18, 18)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(cmbSource, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(cmbDestination, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(cmbDateFrom, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                        .addGap(18, 18, 18)
                        .addComponent(btnSearchFlight, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                            .addComponent(lblAvaliableFlights, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnResetSearch))
                        .addComponent(jScrollPane8, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 914, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(27, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblFlightBookings)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lblSearchBy)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblSource)
                    .addComponent(cmbSource, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(8, 8, 8)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblDestination)
                    .addComponent(cmbDestination, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cmbDateFrom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblTravelDate))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cmbDateTo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblTravelDate1)
                    .addComponent(btnSearchFlight))
                .addGap(13, 13, 13)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lblAvaliableFlights)
                    .addComponent(btnResetSearch))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnSelectFlight)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cmbNumberOfTicket, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cmbCategory, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblClass))
                        .addComponent(lblNumberOfTickets)))
                .addContainerGap(82, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    public void loadScreen() {
        //EnterpriseDirectory ed = business.getEnterpriseDirectory();        
        for (Network n : business.getNetworkList()) {
            for (Enterprise e : n.getEnterpriseDirectory().getEnterpriseList()) {
                if (e instanceof AirlineEnterprise) {
                    this.e = e;
                    loadSourceDestination();
                    break;
                }
            }
        }
    }

    public void loadSourceDestination() {
        cmbSource.removeAllItems();
        cmbDestination.removeAllItems();
        for (Flight flight : e.getFlghtDirectory().getListOfFlights()) {
            cmbSource.addItem(flight.getSource());
            cmbDestination.addItem(flight.getDestination());
        }
    }

    private void btnSelectFlightActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSelectFlightActionPerformed
        // TODO add your handling code here:
        try {
            int selectedRow = tblScheduledFlights.getSelectedRow();
            if (selectedRow >= 0) {
                Flight flight = (Flight) tblScheduledFlights.getValueAt(selectedRow, 0);
                int n = Integer.parseInt(String.valueOf(cmbNumberOfTicket.getSelectedItem()));
                String category = String.valueOf(cmbCategory.getSelectedItem());

                if (category.equalsIgnoreCase("Economy")) {
                    int leftSeats = flight.getTotalEconomySeat() - flight.getEconomyCounter();
                    if (leftSeats >= n) {
                        TicketDetailsJPanel td = new TicketDetailsJPanel(userProcessContainer, userAccount, organization, enterprise, business, flight, n, category);
                        userProcessContainer.add("TicketDetailsJPanel", td);
                        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
                        layout.next(userProcessContainer);
                    }
                } else if (category.equalsIgnoreCase("Business")) {
                    int leftSeats = flight.getTotalBusinessSeat() - flight.getBusinessCounter();
                    if (leftSeats >= n) {
                        TicketDetailsJPanel td = new TicketDetailsJPanel(userProcessContainer, userAccount, organization, enterprise, business, flight, n, category);
                        userProcessContainer.add("TicketDetailsJPanel", td);
                        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
                        layout.next(userProcessContainer);
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "Not Enought Tickets for selected Class");
                    return;
                }

            } else {
                JOptionPane.showMessageDialog(null, Language.selectEntry);
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, Language.fail);
        }
    }//GEN-LAST:event_btnSelectFlightActionPerformed

    private void btnResetSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnResetSearchActionPerformed
        // TODO add your handling code here:
        try {

            cmbSource.removeAllItems();
            cmbDestination.removeAllItems();
            DefaultTableModel model = (DefaultTableModel) tblScheduledFlights.getModel();
            model.setRowCount(0);

        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, Language.fail);
        }
    }//GEN-LAST:event_btnResetSearchActionPerformed
    public void populateFlightsTable() {
        try {
            DefaultTableModel model = (DefaultTableModel) tblScheduledFlights.getModel();
            model.setRowCount(0);
            String s = String.valueOf(cmbSource.getSelectedItem());
            String d = String.valueOf(cmbDestination.getSelectedItem());
            if (s.equals("") || d.equals("")) {
                JOptionPane.showMessageDialog(null, "Please specify valid names of places");
                return;
            }
            String date = String.valueOf(cmbDateFrom.getDate());
            if (cmbDateFrom.getDate().compareTo(new Date()) < 0 ) {
                JOptionPane.showMessageDialog(null, "Please specify a future date");
                return;
            }
            for (Flight f : e.getFlghtDirectory().getListOfFlights()) {
                if (f.getSource().equalsIgnoreCase(s) && f.getDestination().equalsIgnoreCase(d) && f.getFlag() == true
                        && cmbDateFrom.getDate().compareTo(f.getDate()) <= 0
                        && (cmbDateTo.getDate() == null || cmbDateTo.getDate().compareTo(f.getDate()) >= 0) /*&& ((cmbDateTo.getDate().getDate() <= f.getDate().getDate())
                         && (cmbDateTo.getDate().getMonth() <= f.getDate().getMonth())
                         && (cmbDateTo.getDate().getYear() <= f.getDate().getYear()))*/) {
                    Object[] row = new Object[7];
                    row[0] = f;
                    row[1] = f.getSource();
                    row[2] = f.getDestination();
                    row[3] = f.getDate();
                    row[4] = f.getEconomyPrice();
                    row[5] = f.getBusinessPrice();
                    row[6] = f.getRouteCategory();

                    model.addRow(row);

                }

            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Please specify valid search details");
        }
    }


    private void cmbSource(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbSource
        // TODO add your handling code here:
    }//GEN-LAST:event_cmbSource

    private void cmbDestination(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbDestination
        // TODO add your handling code here:
    }//GEN-LAST:event_cmbDestination

    private void btnSearchFlightActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchFlightActionPerformed
        populateFlightsTable();
    }//GEN-LAST:event_btnSearchFlightActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnResetSearch;
    private javax.swing.JButton btnSearchFlight;
    private javax.swing.JButton btnSelectFlight;
    private javax.swing.JComboBox cmbCategory;
    private org.jdesktop.swingx.JXDatePicker cmbDateFrom;
    private org.jdesktop.swingx.JXDatePicker cmbDateTo;
    private javax.swing.JComboBox cmbDestination;
    private javax.swing.JComboBox cmbNumberOfTicket;
    private javax.swing.JComboBox cmbSource;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JLabel lblAvaliableFlights;
    private javax.swing.JLabel lblClass;
    private javax.swing.JLabel lblDestination;
    private javax.swing.JLabel lblFlightBookings;
    private javax.swing.JLabel lblNumberOfTickets;
    private javax.swing.JLabel lblSearchBy;
    private javax.swing.JLabel lblSource;
    private javax.swing.JLabel lblTravelDate;
    private javax.swing.JLabel lblTravelDate1;
    private javax.swing.JTable tblScheduledFlights;
    // End of variables declaration//GEN-END:variables
}
